Metadata-Version: 1.2
Name: traiter
Version: 0.8.0
Summary: Traiter
Home-page: https://github.com/rafelafrance/traiter
License: MIT License

Copyright (c) 2017 Raphael LaFrance

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: # The Traits Database Project [![Build Status](https://travis-ci.org/rafelafrance/traiter.svg?branch=master)](https://travis-ci.org/rafelafrance/traiter)
        
        ## Traiter
        This is the base Traiter information extraction / data mining library used by all of the other client Traiter projects (traiter_efloras, traiter_vertnet, etc.). It's a small library with some historical cruft still attached.
        
        The modules to consider are:
        - trait_matcher.py: The core matcher used by the child matcher projects.
        - spacy_nlp.py: Where I setup spaCy for our unique information extraction needs.
        - util.py: Just a bucket for shared utility functions.
        - The historical cruft mentioned above: It will be removed when I update some of the older Traiter projects.
        
        ## Parsing strategy
        1. I label terms using Spacy's phrase and regular expression matchers.
        1. Then I build up terms using Spacy's rule-based matchers repeatedly until I have built up a recognizable trait.
        1. Everything else is handled by the client Traiters.
        
        ## Install
        You will need to have Python3 installed, as well as pip, a package manager for python. You can install the requirements into your python environment like so:
        ```
        git clone https://github.com/rafelafrance/traiter.git
        cd traiter
        optional: virtualenv -p python3 venv
        optional: source venv/bin/activate
        python -m pip install --requirement requirements.txt
        python -m spacy download en
        ```
        
        ## Run
        ```
        python3 traiter.py ... TODO ...
        ```
        
        ## Tests
        You can run the tests like so:
        ```
        cd /my/path/to/traiter
        python -m unittest discover
        ```
        
Platform: UNKNOWN
Requires-Python: >=3.8
